Index of Commands covered in the Pro Git book.
The example file paths are from Windows 8.
The $ symbol indicates the bash prompt.
General formatting of this document:

command
#command description

	option
	#option description	
	
	option
	#option description	
	
	#examples
	$ git example
	
####################
Tips and Tricks
####################

#auto-completion
press the tab key when you're writing a Git subcommand OR option, and it should return a set of suggetsions from which to pick

#git aliases
create shorthand for common git subcommands OR !external commands
	
####################
Setup and Config
####################

config 
#configure your local git
#config keys cascade such that more specific ones override more general ones
#by default reads & writes to .git/config of the current repository

	--global 
	#reads & writes to ~/.gitconfig eg C:\Users\SomeUser\.gitconfig
	
	--system 
	#reads & writes to /etc/gitconfig eg C:\Program Files (x86)\Git\etc\gitconfig
	
	user.name “John Doe”
	user.email johndoe@example.com
	#sets your identity
	
	core.editor some-editor
	#sets your editor

	merge.tool some-merge-tool		
	#sets your merge tool

	--list 
	#shows all your config keys. 
	#keys that are in multiple config files are duplicated
	
	{key}
	#display what Git thinks is the value of that key.
	
	alias
	#setup a shorthand for common commands
	
	#Examples
	$ git config --global user.name "Shaun Luttin”
	$ git config --system core.editor "'C:\Program Files (x86)\Notepad++\notepad++.exe' -multiInst -notabbar -nosession -noPlugin"
	$ git config --global merge.tool "'C:\Program Files (x86)\KDiff3\kdiff3.exe'"
	$ git config --list
	$ git config --global alias.co checkout
	$ git config --global alias.br branch
	$ git config --global alias.ci commit
	$ git config --global alias.st status
	$ git config --global alias.unstage 'reset HEAD --'
	$ git config --global alias.last 'log -l 1 HEAD'
	$ git config --global alias.visual "!gitk"
		
help
#show help for git

	#examples
	$ git help

####################
Getting and Creating Projects
####################

init
#create a local repository in the current directory

	#examples
	$ git init
	
clone
#start locally tracking an existing remote repository
	
	[url]
	#the url from which to clone
	
	targetdir
	#the name of the target local directory to store the cloned files
	
	#examples
	$ git clone [git@github.com:shaunluttin/PracticeGit.git] someLocalDirectory
	$ git clone [https://github.com/shaunluttin/PracticeGit.git] 
	
####################
Basic Snapshotting
####################

add
#Begin tracking a new file | stage modified files | mark merge conflicted files as resolved.

	some_filename
	#the name of the file to add

	*
	#add all changed files to the index (aka to the staging area)	

status
#Determine which files (ignoring empty folders) are in which of the three states: untracked, modified, staged.
#What have you changed but not yet staged?
#What have you staged that you are about to commit?

	#examples
	$ git status

diff
#Determine the exact modified lines (i.e. show patches).
#by default default compares your working directory to staging area
	
	--cached | --staged
	#compared staging area to last commit						
	
commit
#Add staged files to the local repository
	
	-m "Example commit message."		
	#add a commit message

	-a
	#stage every file *that is already tracked* before doing the commit

	--amend
	#overwrite the message of you last commit and/or add files to your last commit	
	
	#examples
	$git commit -a -m "some message"
	
reset
#unstage a file

	HEAD some_filename
	#unstage the specified file (yes, this is a strange command)

	#examples
	git reset HEAD instructions.txt

rm
#stop tracking a file and delete it locally

	-f 
	#required if the file is currently staged
	
	--cached
	#stop tracking a file without deleting it locally
	#takes file names and glob patterns
	
mv name1 from name2 to
#rename a file in git (though, git will figure this out if you rename using any tool)
	
	name1 name2
	#rename a file from name1 to name2
	
	#examples
	$git practice1.txt p1.txt
	
--------------------
Git Ignore Syntax
--------------------

blank lines or lines starting with # are ignored
end patterns with a (/) to signify a directory, alone it signified root
negate a pattern with an (!)
backslash (\) is for escaping
standard glob patterns
	* zero or more characters
	[abc] any character inside the brackets
	? any single character
	[0-9] any range of numbers
	[a-z] any range of characters	

####################
Branching and Merging
####################

branch [branchName]
#create a new pointer at the same commit you're currently on 
#it does NOT automatically switch to that branch

	#notes
	#HEAD  is a pointer to the local branch that you're currently on

checkout
#overwrite your working directory with the contents of the specified checkout

	-- some_filename
	#reverts the specified file back to its last snapshot (dangerous but useful command)
	
	[someBranch]
	#checkout that branch
	#move HEAD to point to the specified branch

merge
#TODO

mergetool
#TODO

log
#look at the repo commit history, in reverse chronological order
#this will invoke your pager
#in PowerShell ENTER moves down one line, SPACE moves one page, and (q) exits the pager to the prompt

	-p 
	#show the diff (aka patch) introducted in each commit
	
		--word-diff
		#show the patch in word-diff format, whatever that means
	
	--stat
	#see some abbreviated stats with each commit (modified files, lines changed, lines added, lines removed)	
	
	--shortstat
	#show only changed, insertions, deletions
	
	--graph
	#add an ASCII graph showing your branch and merge history
	
	--relative-date 
	#show the date in words such as 78 minutes ago or two days ago. fun!

	--oneline
	#shorthard for --pretty=oneline --abbrev-commit
	
	--pretty
	#change the log output format
	
		=oneline
		#print each commit one a single line
		
		=short
		#default but with less info
		
		=full
		#default but with more info
		
		=fuller
		#oneline with even more info
	
		=format
		#control the format			
		
		#examples (in ascending order of verbosity)
		git log --pretty=format:"%an"
		git log --pretty=format:"%an" --graph
		git log --pretty=format:"%an" --stat
		git log --pretty=oneline -2
		git log --pretty=short -2
		git log --pretty=full -2
		git log -2
		git log --pretty=fuller -2

	-2
	#limit the output to the last 2 entries (or any number)

	--since | --after
	#the least recent date

		=2.weeks
		=lots of formats

	--until | --before
	#the most recent date		

	--author
	#filter on a specific author

	--committer
	#filter on a specific committer

	--grep
	#search for keywords in the commit message

	--all-match
	#allows specifying both --author and --grep options

	--some_directory_or_file_name
	#limit the output to commits that involve that dir or file
	#this is always the last option to use in a list of options

gitk
#open the visual git log tool that is distributed with kit

stash
#TODO

tag
#list the available tags in alpha order

	-l 'some pattern'
	#list tags that match a particular pattern
	
	-a [someTag] 
	#create an annotated tag (recommended)
	
	-m 'some message'
	#add a message to the annotated tag
	
	-s
	#sign a tag with GPG (requires a private key)
	
	-v [someTag]
	#verify a signed tag (requires the signer's public key in your keyring)
	#convention suggests suffixing the tag with -lw
	
	[someTag]
	#create a lightweight tag
	
	[someCommitSHA]
	#tag a specific commit
	
	#related commands
	
	git push [remoteName] [tagName]
	#push a tag to a remote (git push doesn't do this automatically)
	
	git push [remoteName] --tags
	#transfer all your tags to the specified remote	
	
show
#show the details of the git object

		[sometag]
		#show the tag data along with its associated commit

####################
Sharing and Updating Projects
####################

fetch
#recommended over pull
#get data from a remote repository WITHOUT automatically merging it with ANY of your work


	[remote-name]
	
	#examples
	git fetch origin

pull
#get from from a remote repository AND automatically merge into your current branch

push

	[remote-name] [branch-name]	
	
	#examples
	git push origin master #push your master branch to the origin's master branch
	

remote
#see the short-names of the remote servers you have configured
#origin is the default short-name of the repo from which you originally cloned

	-v 
	#also display the url
	
	show [remote-name]
	#show information about the specified remote repository
	
	rename oldname newname
	#rename the short-name of the specified remote repository
	
	rm [remote-name]
	#remove a reference to a remote repository


submodule

####################
Inspection and Comparison
####################

show
log
diff
shortlog
describe
Patching
am
apply
cherry-pick
rebase

####################
Debugging
####################

bisect
blame
Email
am
apply
format-patch
send-email
request-pull
External Sytems
svn
fast-import

####################
Administration
####################

clean
gc
fsck
reflog
filter-branch
instaweb
archive

####################
Server Admin
####################

daemon
update-server-info
